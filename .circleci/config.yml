version: 2.1

orbs:
  slack: circleci/slack@4.3.1

commands:
  slack-notify:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "my-backend-stack-$CIRCLE_WORKFLOW_ID"
            aws cloudformation delete-stack --stack-name "my-frontend-stack-$CIRCLE_WORKFLOW_ID"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install libraries
          command: npm install
      - run:
          name: Build front-end
          command: npm run build
      - save_cache:
          paths: [node_modules, dist]
          key: frontend-build-$CIRCLE_WORKFLOW_ID
      - slack-notify

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install libraries
          command: npm install
      - run:
          name: Back-end build
          command: npm run build
      - save_cache:
          paths: [node_modules, dist]
          key: backend-build-$CIRCLE_WORKFLOW_ID
      - slack-notify

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys: [frontend-build-$CIRCLE_WORKFLOW_ID]
      - run:
          name: Front-end build
          command: npm run test
      - slack-notify

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys: [backend-build-$CIRCLE_WORKFLOW_ID]
      - run:
          name: Back-end build
          command: npm run test
      - slack-notify 

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Scan Frontend
          command: npm audit --audit-level=critical
      - slack-notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Scan Backend
          command: npm audit --audit-level=critical
      - slack-notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=my_tag \
              --stack-name "my-backend-stack-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=my_tag \
              --stack-name "my-frontend-stack-$CIRCLE_WORKFLOW_ID" \
              --parameter-overrides ID="$CIRCLE_WORKFLOW_ID"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-88229efd-2fd2-4438-aa88-f40c913adb67" --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            pwd
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - slack-notify

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - add_ssh_keys:
          fingerprints:
            - "66:ff:3b:93:a8:04:05:bc:cd:1d:ba:35:b3:cd:2e:78"
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            pwd
            ls
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
          no_output_timeout: 15m
      - destroy-environment
      - slack-notify

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys: [backend-build-$CIRCLE_WORKFLOW_ID]
      - run:
          name: Run migrations
          command: npm run  migrations > migration_log.log
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" "migration_log.log";
            then
              curl -H "Content-Type: text/plain" -H "token: 40a82b81-165e-4c01-94b0-df1080ed9140" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment
      - slack-notify

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install tar gzip nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            cat ../.circleci/ansible/inventory.txt
            export BACKEND_IP=`sed -n 2p ../.circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            echo "${API_URL}"
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-$CIRCLE_WORKFLOW_ID --recursive
      - destroy-environment
      - slack-notify

  deploy-backend:
    docker:
      - image: ansible/ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "66:ff:3b:93:a8:04:05:bc:cd:1d:ba:35:b3:cd:2e:78"
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build-$CIRCLE_WORKFLOW_ID]
      - run:
          name: Deploy backend
          command: |
            pwd
            ls -li -a
            ls backend
            ls backend/dist
            mkdir -p .circleci/ansible/roles/deploy/files
            cd backend; zip -r ../.circleci/ansible/roles/deploy/files/backend.zip dist; cd ..
            cp backend/package.json .circleci/ansible/roles/deploy/files/
            echo NODE_ENV=production > .circleci/ansible/roles/deploy/files/.env
            echo ENVIRONMENT=production >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_CONNECTION=postgres >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_ENTITIES='./dist/modules/domain/*/*/*.entity.js' >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> .circleci/ansible/roles/deploy/files/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> .circleci/ansible/roles/deploy/files/.env
            ls .circleci/ansible/roles/deploy/files
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
      - destroy-environment
      - slack-notify

  smoke-test:
    docker:
      - image: alpine:3.13
    steps:
      - run:
          name: Install dependencies
          command: apk add --update curl
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            cat .circleci/ansible/inventory.txt
            export BACKEND_IP=`sed -n 2p .circleci/ansible/inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            echo "export API_URL=${API_URL}" >> $BASH_ENV
      - run:
          name: Backend smoke test.
          command: curl $API_URL

      - run:
          name: Frontend smoke test.
          command: |
            export URL=http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com
            echo "${URL}"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
      - slack-notify

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=my_tag \
              --stack-name "my-udapeople-cloud-front" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID}"
      - slack-notify

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi
        - slack-notify


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]